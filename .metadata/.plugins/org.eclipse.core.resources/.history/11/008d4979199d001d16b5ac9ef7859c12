package ex13mvc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;
import model.memberDAO;


public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		// 디자인 패턴 : 계속해서 같은 문제가 발생하여, 이 문제를 해결하고자
		// 형식, 규칙을 지정해 놓은 것
		// MVC 패턴
		// Model : 데이터를 저장하거나, 조작하기 위한 코드들의 모음
		// View : 사용자에게 직접 보여지는 부분
		// Controller : 실제 기능이 일어나는 부분

		System.out.println("======================SHRD 회원관리 프로그램====================");
		while (true) {
			System.out.println("[1]회원 가입 [2]로그인 [3]전체회원목록 [4] 회원정보 수정 [5]회원탈퇴 [6]종료");
			int choice = sc.nextInt();
			if (choice == 1) {
				// 회원가입
				System.out.print("ID 입력 : ");
				String id = sc.next();
				System.out.print("PW 입력 : ");
				String pw = sc.next();
				System.out.print("이름 입력 : ");
				String name = sc.next();
				System.out.print("전화 번호 입력 : ");
				String tel = sc.next();

				// DAO의 join 메소드 사용
				// DAO 객체 생성

				memberDAO dao = new memberDAO();
				int row = dao.join(id, pw, name, tel);
				if (row > 0) {
					System.out.println("회원 가입 성공!!!");
				} else {
					System.out.println("회원 가입 실패!!!");
				}

				// JDBC

				// Runtime Error : 실행 중 발생하는 에러(문법적으로는 문제 x --> 실행 시 오류가 발생 가능성이 있어 예외처리가 필요)
				// Syntax Error : 문법 자체에 에러가 있는 것

				// try - catch : 예외처리 구문
				// 예외 상황이 발생하더라도 실행을 멈추지 않음
				// try문 안에 있는 코드를 실행
				// 만약에 예외상황이 발생한다면 실행을 멈추고 catch문을 실행

			} else if (choice == 2) {
				// 로그인
				System.out.print("ID 입력 : ");
				String id = sc.next();
				System.out.print("PW 입력 : ");
				String pw = sc.next();
				Connection conn = null;
				PreparedStatement psmt = null;
				ResultSet rs = null;
				try {

					// 2) 드라이버 동적 로딩
					Class.forName("oracle.jdbc.driver.OracleDriver");

					// 3) DB 연결 통로 생성
					String url = "jdbc:oracle:thin:@localhost:1521:xe";
					String user_id = "hr";
					String user_pw = "hr";
					conn = DriverManager.getConnection(url, user_id, user_pw);

					// 4) SQL문 준비
					String sql = "select * from big_member where id = ? and pw = ?";

					// 5) 실행 준비 상태 만들기
					psmt = conn.prepareStatement(sql);
					psmt.setString(1, id);
					psmt.setString(2, pw);

					rs = psmt.executeQuery();
					
					if (rs.next()) {
						System.out.println("로그인 성공");
//						String uid = rs.getString(1);
//						String upw = rs.getString(2);
						String uname = rs.getString("name");
//						String utel = rs.getString("tel");
						
						System.out.printf("%s님 환영합니다.\n", uname);
					} else {
						System.out.println("로그인 실패");
					}

				} catch (Exception e) {
					// 반드시 넣어 줘야한다.
					e.printStackTrace(); // 에러를 콘솔창에 출력
				} finally {
					try {
						// 8) 사용했던 객체들 담기 (나중에 만들어진 순서대로)
						if (rs != null) {
							rs.close();
						}
						if (psmt != null) {
							psmt.close();
						}
						if (conn != null) {
							conn.close();
						}
					} catch (Exception e2) {
						e2.printStackTrace();
					}
				}

			} else if (choice == 3) {
				// 전체회원목록
			} else if (choice == 4) {
				// 회원정보 수정
			} else if (choice == 5) {
				// 회원탈퇴
			} else if (choice == 6) {
				// 종료
				System.out.println("종료합니다.");
				break;
			} else {
				// 다른 숫자 입력시
				System.out.println("다시입력하세요.");
			}
		}

	}

}
